<?xml version="1.0" encoding="UTF-8" ?>
<!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN" 
"http://mybatis.org/dtd/mybatis-3-mapper.dtd">

<mapper namespace="org.springside.examples.showcase.repository.mybatis.AccountDao">
	<resultMap id="teamDetailMap" type="Team">
		<id property="id" column="team_id" />
		<result property="name" column="team_name" />
		<association property="master" column="master_id" javaType="User">
			<id property="id" column="master_id" />
			<result property="name" column="master_name" />
			<result property="email" column="master_email" />
		</association>
		<collection property="userList" javaType="User">
			<id property="id" column="user_id" />
			<result property="name" column="user_name" />
			<result property="email" column="user_email" />
		</collection>
	</resultMap>

	<!-- 获取部门详细信息, 输出用resultMap关联嵌套对象 -->
	<select id="getTeamWithDetail" parameterType="int" resultMap="teamDetailMap">
		select d.id as team_id,
		t.name as team_name,
		m.id as master_id,
		m.name as master_name,
		m.email as master_email,
		u.id as user_id,
		u.name as user_name,
		u.email as user_email
		from acct_team t, ss_user m, ss_user u
		where t.master_id=m.id and t.id=u.team_id
		and t.id=#{id}
	</select>

	<!--
		获取用户: 输出直接映射到对象, login_name列要"as loginName"以方便映射  team_id as "team.id"创建team对象并赋值
	-->
	<select id="getUser" parameterType="int" resultType="User">
		select id, name, email,
		login_name as loginName,
		team_id as "team.id"
		from ss_user
		where id=#{id}
	</select>

	<!-- 查询用户,演示: 1.输入用map传入多个参数 2.<where>语句, 智能添加where和and关键字 3.输出直接映射对象 -->
	<select id="searchUser" parameterType="map" resultType="User">
		select id, name, email,
		login_name as loginName,
		team_id as "team.id"
		from ss_user
		<where>
			<if test="loginName != null">
				login_name=#{loginName}
			</if>
			<if test="name != null">
				and name=#{name}
			</if>
		</where>
	</select>

	<!-- 插入用户： 1.由数据库生成id并赋值到user对象 2.输入用对象, 嵌套属性表达式#{team.id} -->
	<insert id="saveUser" parameterType="User" useGeneratedKeys="true" keyProperty="id">
		insert into ss_user (
		login_name, name, password, email, team_id)
		values (
		#{loginName}, #{name}, #{password}, #{email},
		#{team.id})
	</insert>
	
	<!-- 删除用户 -->
	<delete id="deleteUser" parameterType="int">
	     delete from ss_user where id=#{id}
	</delete>
</mapper> 
